# Generated by Django 5.1.7 on 2025-03-19 08:04
# This is an auto-generated migration file created by Django to define changes to the database schema.

import django.db.models.deletion
# Importing the deletion module to handle foreign key deletion behavior (e.g., CASCADE).
from django.conf import settings
# Importing settings to reference configuration details like the custom user model.
from django.db import migrations, models
# Importing Django's migrations and models modules to define schema changes and field types.


class Migration(migrations.Migration):
    # This class defines a single database migration.

    initial = True
    # Indicates this is the first migration for the app, creating initial tables.

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]
    # Specifies dependencies: this migration relies on the user model defined in settings.AUTH_USER_MODEL,
    # ensuring the user table exists before creating models that reference it.

    operations = [
        # List of operations to apply to the database schema.

        migrations.CreateModel(
            name='BlogPost',
            # Creates a new model (table) named 'BlogPost' in the database.
            fields=[
                # Defines the fields (columns) for the BlogPost model.
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Auto-incrementing primary key field for unique identification of each blog post.
                ('title', models.CharField(max_length=200)),
                # A character field for the blog post title, limited to 200 characters.
                ('content', models.TextField()),
                # A text field for the main content of the blog post, with no size limit.
                ('topic', models.CharField(max_length=100)),
                # A character field for the blog post topic, limited to 100 characters.
                ('created_at', models.DateTimeField(auto_now_add=True)),
                # A timestamp field that automatically sets to the creation time of the post.
                ('photo', models.ImageField(blank=True, null=True, upload_to='blog_photos/')),
                # An optional image field for uploading photos, stored in the 'blog_photos/' directory.
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                # A foreign key linking to the user who authored the post; deletes the post if the user is deleted.
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
                # A many-to-many relationship tracking users who liked the post; 'liked_posts' allows reverse lookups.
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            # Creates a new model (table) named 'Comment' in the database.
            fields=[
                # Defines the fields (columns) for the Comment model.
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Auto-incrementing primary key field for unique identification of each comment.
                ('content', models.TextField()),
                # A text field for the comment's content, with no size limit.
                ('created_at', models.DateTimeField(auto_now_add=True)),
                # A timestamp field that automatically sets to the creation time of the comment.
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                # A foreign key linking to the user who wrote the comment; deletes the comment if the user is deleted.
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blogs.blogpost')),
                # A foreign key linking to the associated blog post; deletes the comment if the post is deleted.
                # 'related_name="comments"' allows accessing all comments on a post via post.comments.
            ],
        ),
    ]